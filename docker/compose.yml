services:
  traefik:
    image: 'traefik'
    command:
      - '--api=true'
      - '--api.insecure=true'
      - '--api.dashboard=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.mytlschallenge.acme.tlschallenge=true'
      - '--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}'
      - '--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json'
    ports:
      - '443:443'
      - '80:80'
    volumes:
      - ${DATA_FOLDER}/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  initContainer:
    image: busybox
    command: ['sh', '-c', 'chown -R 1000:1000 /home/node/.n8n']
    volumes:
      - ${DATA_FOLDER}/.n8n:/home/node/.n8n


  # n8n本体のサービス定義
  n8n:
    image: n8nio/n8n:latest 
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=websecure
      - 'traefik.http.routers.n8n.rule=PathPrefix(`/${SUBFOLDER}{regex:$$|/.*}`)'
      - 'traefik.http.middlewares.n8n-stripprefix.stripprefix.prefixes=/${SUBFOLDER}'
      - 'traefik.http.routers.n8n.middlewares=n8n-stripprefix'
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
    environment:
      # --- データベース関連の設定 ---
      # .envファイルから読み込む
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db # サービス名'db'をホストとして指定
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}

      # --- n8nの基本設定 ---
      # .envファイルから読み込む
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}

      # for via local network
      - N8N_SECURE_COOKIE=false

      # --- 拡張性のための設定（任意）---
      # WebhookのテストURL。ローカル環境では空欄でOK
      # 本番環境やngrok等を使う場合は設定 -> WEBHOOK_URL=https://your-domain.com/
      - NODE_ENV=production
      - N8N_PROTOCOL=https
      - N8N_HOST=${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PATH=${N8N_PATH}
      - SUBFOLDER=${SUBFOLDER}
      - WEBHOOK_URL=https://${DOMAIN_NAME}${N8N_PATH}
    volumes:
      # n8nの設定ファイルやSQLiteデータベース（この構成では未使用）を永続化
      # - n8n_data:/home/node/.n8n
      - ${DATA_FOLDER}/.n8n:/home/node/.n8n

    ports:
      # ホストの5678ポートをコンテナの5678ポートにマッピング
      - "5678:5678"
    dns:
      - 8.8.8.8    # Google Public DNS
      - 1.1.1.1    # Cloudflare DNS
    depends_on:
      db:
        condition: service_started
      initContainer:
        condition: service_completed_successfully


  # PostgreSQLデータベースのサービス定義
  db:
    image: postgres:16  # 任意のバージョンを指定可能
    restart: unless-stopped
    environment:
      # .envファイルから読み込む
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
    volumes:
      # データベースのデータを永続化
      - ./data/postgres:/var/lib/postgresql/data

